name: Build

on: [push, pull_request, workflow_dispatch, release]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Hashing dependency CMake files
      id: dep_cmake_hash
      run: echo "dep_cmake_hash=${{ hashFiles('./deps/**') }}" >> $GITHUB_OUTPUT

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{github.workspace}}\dist

    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --preset default -DLibBGCode_BUILD_DEPS=ON -DCMAKE_INSTALL_PREFIX=dist/  
        cmake --build --preset default --target install
    
    - uses: actions/upload-artifact@v4  # upload python module
      name: Upload Linux Build
      if: success()
      with:
        name: bgcode-linux
        path: ${{github.workspace}}/dist/bin

    - name: Create ZIP file (only for release)
      if: github.event_name == 'release'
      run: zip -j orca_bgcode_linux.zip ${{github.workspace}}/dist/bin/bgcode

    - name: Upload ZIP to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: orca_bgcode_linux.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-msvc:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3
      name: Checking out

    - uses: ilammy/msvc-dev-cmd@v1
      name: Configuring build environment
      with: 
        arch: x64

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{github.workspace}}\dist

    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --preset default -DLibBGCode_BUILD_DEPS=ON -DCMAKE_INSTALL_PREFIX=dist/  
        cmake --build --preset default --target install
      

    - uses: actions/upload-artifact@v4  # upload python module
      name: Upload windows build
      if: success()
      with:
        name: bgcode-windows
        path: ${{github.workspace}}\dist\bin

    - name: Create ZIP file (only for release)
      if: github.event_name == 'release'
      run: Compress-Archive -Path ${{github.workspace}}\dist\bin\* -DestinationPath ${{github.workspace}}\orca_bgcode_windows.zip

    - name: Upload ZIP to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}\orca_bgcode_windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mac-arm:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{github.workspace}}\dist

    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --preset default -DLibBGCode_BUILD_DEPS=ON -DCMAKE_INSTALL_PREFIX=dist/  
        cmake --build --preset default --target install
      
    - uses: actions/upload-artifact@v4  # upload python module
      name: Upload MacOS Build
      if: success()
      with:
        name: bgcode-mac
        path: ${{github.workspace}}/dist/bin

    - name: Create ZIP file (only for release)
      if: github.event_name == 'release'
      run: zip -j ${{github.workspace}}/orca_bgcode_macos.zip ${{github.workspace}}/dist/bin/bgcode

    - name: Upload ZIP to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}/orca_bgcode_macos_arm64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mac-intel:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v3
    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{github.workspace}}\dist

    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --preset default -DLibBGCode_BUILD_DEPS=ON -DCMAKE_INSTALL_PREFIX=dist/  
        cmake --build --preset default --target install
      
    - uses: actions/upload-artifact@v4  # upload python module
      name: Upload MacOS Build
      if: success()
      with:
        name: bgcode-mac
        path: ${{github.workspace}}/dist/bin

    - name: Create ZIP file (only for release)
      if: github.event_name == 'release'
      run: zip -j ${{github.workspace}}/orca_bgcode_macos.zip ${{github.workspace}}/dist/bin/bgcode

    - name: Upload ZIP to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}/orca_bgcode_macos_amd64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
